Namespace(api_key='eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vYXBwLm5lcHR1bmUuYWkiLCJhcGlfdXJsIjoiaHR0cHM6Ly9hcHAubmVwdHVuZS5haSIsImFwaV9rZXkiOiIwOTE0MGFjYy02NzMwLTRkODQtYTU4My1lNjk0YWEzODM3MGIifQ==', batch_size=2, beta_1=0.9, beta_2=0.98, debug=True, epochs=100, is_distributed=False, log_images=False, lr=0.001, model_path='checkpoints/lstm_ac_attention_mmd.ckpt', n_gpus=1, n_hidden_dim=64, neptune_logger=True, num_nodes=1, out_model_path='checkpoints/lstm_ac_attention_mmd.ckpt', retrain=False, root='./dataset', src_input_file='x_train.pt', src_target_file='y_train.pt', tar_input_file='x_val.pt', tar_target_file='y_val.pt', test=False, time_steps=15, val_recipe=False)
OvenLightningModule(
  (model): EncoderDecoderConvLSTM(
    (encoder_1_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((4, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (encoder_2_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_1_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_2_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_CNN): Conv3d(64, 1, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
    (layer_norm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
  )
  (criterion): MSELoss()
  (dcl_criterion): NLLLoss()
)
model.encoder_1_convlstm.conv.weight
model.encoder_1_convlstm.conv.query_conv.weight
model.encoder_1_convlstm.conv.value_conv.weight
model.encoder_1_convlstm.layernorm.weight
model.encoder_2_convlstm.conv.weight
model.encoder_2_convlstm.conv.query_conv.weight
model.encoder_2_convlstm.conv.value_conv.weight
model.encoder_2_convlstm.layernorm.weight
model.decoder_1_convlstm.conv.weight
model.decoder_1_convlstm.conv.query_conv.weight
model.decoder_1_convlstm.conv.value_conv.weight
model.decoder_1_convlstm.layernorm.weight
model.decoder_2_convlstm.conv.weight
model.decoder_2_convlstm.conv.query_conv.weight
model.decoder_2_convlstm.conv.value_conv.weight
model.decoder_2_convlstm.layernorm.weight
model.decoder_CNN.weight
model.layer_norm.weight
Namespace(api_key='eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vYXBwLm5lcHR1bmUuYWkiLCJhcGlfdXJsIjoiaHR0cHM6Ly9hcHAubmVwdHVuZS5haSIsImFwaV9rZXkiOiIwOTE0MGFjYy02NzMwLTRkODQtYTU4My1lNjk0YWEzODM3MGIifQ==', batch_size=2, beta_1=0.9, beta_2=0.98, debug=True, epochs=100, is_distributed=False, log_images=False, lr=0.001, model_path='checkpoints/lstm_ac_attention_mmd.ckpt', n_gpus=1, n_hidden_dim=64, neptune_logger=True, num_nodes=1, out_model_path='checkpoints/lstm_ac_attention_mmd.ckpt', retrain=False, root='./dataset', src_input_file='x_train.pt', src_target_file='y_train.pt', tar_input_file='x_val.pt', tar_target_file='y_val.pt', test=False, time_steps=15, val_recipe=False)
OvenLightningModule(
  (model): EncoderDecoderConvLSTM(
    (encoder_1_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(68, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((4, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (encoder_2_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_1_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_2_convlstm): ConvLSTMCell(
      (conv): AttentionConv(
        (key_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (query_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (value_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layernorm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
    )
    (decoder_CNN): Conv3d(64, 1, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
    (layer_norm): LayerNorm((64, 50, 50), eps=1e-05, elementwise_affine=True)
  )
  (criterion): MSELoss()
  (dcl_criterion): NLLLoss()
)
model.encoder_1_convlstm.conv.weight
model.encoder_1_convlstm.conv.query_conv.weight
model.encoder_1_convlstm.conv.value_conv.weight
model.encoder_1_convlstm.layernorm.weight
model.encoder_2_convlstm.conv.weight
model.encoder_2_convlstm.conv.query_conv.weight
model.encoder_2_convlstm.conv.value_conv.weight
model.encoder_2_convlstm.layernorm.weight
model.decoder_1_convlstm.conv.weight
model.decoder_1_convlstm.conv.query_conv.weight
model.decoder_1_convlstm.conv.value_conv.weight
model.decoder_1_convlstm.layernorm.weight
model.decoder_2_convlstm.conv.weight
model.decoder_2_convlstm.conv.query_conv.weight
model.decoder_2_convlstm.conv.value_conv.weight
model.decoder_2_convlstm.layernorm.weight
model.decoder_CNN.weight
model.layer_norm.weight
